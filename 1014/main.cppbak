#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;

bool dp(const int num[], int weight) {

    int f[11] = {0};

    for (int i = 0; i < 6; ++i) {
        for (int j = weight; j >= 0; --j) {

            int maxCnt = min(num[i], j / (i + 1));
            for (int k = 1; k <= maxCnt; ++k) {
                int temp = (i + 1) * k;
                f[j] = max(f[j], f[j - temp] + temp);
            }
        }
    }

    return f[weight] == weight;

}

bool process(const int num[], const int left[]) {

    int weight = 0;
    for (int i = 0; i < 6; ++i) weight += left[i] * (i + 1);

    for (int i = 33; i <= 64; ++i) {

        int present = 0;

        int j = 0;
        while (j < 6) {
            if ((i & (1 << j))) present += left[j] * (j + 1);
            j++;
        }

        int diff = abs(weight - present * 2);

        if (diff == 0) return true;

        if ((diff & 1) == 0 && dp(num, diff / 2)) {
            return true;
        }
    }

    return false;
}

int main1() {

    ifstream cin("a.in");
    ofstream cout("a.out");

    int sum = 1, index = 0, num[6], left[6];

    while (sum > 0) {

        index++;
        sum = 0;
        for (int i = 0; i < 6; ++i) {
            cin >> num[i];
            sum += num[i] * (i + 1);
            left[i] = num[i] & 1;
            num[i] >>= 1;

        }

        if (sum == 0) break;

        cout << "Collection #" << index << ":" << endl;
        if (((sum & 1) == 0) && process(num, left)) {
            cout << "Can be divided." << endl << endl;
        } else {
            cout << "Can't be divided." << endl << endl;
        }
    }

    return 0;
}